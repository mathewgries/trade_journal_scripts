const lastColAlpha = "V"
const lastColNum = 21
const newRowCol = "C"
const errorColumn = 23
const headerRowNum = 4

/**************** Button Event Functions ****************/

function updatePosition() {
  const sheetName = getSheetName()
  const headerColumns = getHeaders(sheetName)[0]
  const active_range = SpreadsheetApp.getActiveRange()
  if (!validateRange(sheetName, active_range)) return
  const rowIndex = active_range.getRowIndex()
  const rangeDataArr = getRangeData(sheetName, rowIndex)
  const rangeDataObj = setDataToObject(headerColumns, rangeDataArr, rowIndex)
  if (!validateRangeData(sheetName, rangeDataObj)) return
  const updatedRangeDataObj = updateRangeData(rangeDataObj)
  updateSheetRow(sheetName, "A", lastColAlpha, updatedRangeDataObj)
  addFormulasToRow(sheetName, rowIndex)
}

function addNewRow() {
  const sheetName = getSheetName()
  const headerColumns = getHeaders(sheetName)[0]
  const rowIndex = getNextOpenRowIndex(sheetName)
  insertRow(sheetName, rowIndex)
  const defaultDataObj = { IsOpen: true, Date: new Date(), rowIndex }
  addCheckbox(sheetName, rowIndex)
  updateSheetRow(sheetName, "B", newRowCol, defaultDataObj)
  addFormulasToRow(sheetName, rowIndex)
}

function addRunnerRow() {
  const sheetName = getSheetName()
  const headerColumns = getHeaders(sheetName)[0]
  const active_range = SpreadsheetApp.getActiveRange()
  if (!validateRange(sheetName, active_range)) return
  const rowIndex = active_range.getRowIndex()
  const rangeDataArr = getRangeData(sheetName, rowIndex)
  const rangeDataObj = setDataToObject(headerColumns, rangeDataArr, rowIndex)
  if (!validateRangeData(sheetName, rangeDataObj)) return
  if(!validateDataForRunnerRow(sheetName, rangeDataObj)) return
  createRunnerRow(sheetName, rangeDataObj)
  
}

/**************** END: Button Event Functions ****************/

/**************** Runner Row Specific Functions ****************/

function createRunnerRow(sheetName, rangeDataObj) {
  const rowIndex = rangeDataObj.rowIndex
  insertRow(sheetName, rowIndex)
  const runnerDataObj = updateRunnerData(rangeDataObj) 
  updateSheetRow(sheetName, "A", lastColAlpha, runnerDataObj)
  addFormulasToRow(sheetName, rowIndex)
}

function updateRunnerData(rangeDataObj) {
  const newEntrySize = rangeDataObj.EntrySize - rangeDataObj.ExitSize
  const newTotalEntry = newEntrySize * rangeDataObj.EntryPrice
  return {
    ...rangeDataObj,
    RunUpdate: false,
    IsOpen: true,
    EntrySize: newEntrySize,
    ExitSize: "",
    TotalEntry: newTotalEntry,
    ExitPrice: "",
    TotalExit: "",
    ["P/L$"]: "",
    ["P/L%"]: "",
    rowIndex: rangeDataObj.rowIndex + 1
  }
}

/**************** END: Runner Row Specific Functions ****************/

/**************** Main Operation Functions ****************/

function getSheetName() {
  let activeSheet = SpreadsheetApp.getActiveSheet();
  return activeSheet.getName();
}

function getHeaders(sheetName) {
  return SpreadsheetApp.getActiveSpreadsheet()
    .getSheetByName(sheetName)
    .getRange(`A${headerRowNum}:${lastColAlpha}${headerRowNum}`)
    .getValues()
}

function getRangeData(sheetName, rowIndex) {
  return SpreadsheetApp.getActiveSpreadsheet()
    .getSheetByName(sheetName)
    .getRange(`A${rowIndex}:${lastColAlpha}${rowIndex}`)
    .getValues()[0]
}

function setDataToObject(headers, rangeDataArr, rowIndex) {
  let obj = { rowIndex }
  for (let i = 0; i < headers.length; i++) {
    if (i < rangeDataArr.length) {
      obj[headers[i]] = rangeDataArr[i]
    } else {
      break;
    }
  }
  return obj
}

function updateRangeData(row) {
  return {
    ...row, IsOpen: false, TotalExit: row.ExitSize * row.ExitPrice,
    ["P/L$"]: calculatePLM(row.Side, row.ExitSize, row.EntryPrice, row.ExitPrice),
    ["P/L%"]: calculatePGL(row.Side, row.ExitSize, row.EntryPrice, row.ExitPrice)
  }
}

function updateSheetRow(sheetName, firstCol, lastCol, rangeDataObj) {
  const rowIndex = rangeDataObj.rowIndex
  delete rangeDataObj.rowIndex
  const rangeDataArr = Object.keys(rangeDataObj).map(x => rangeDataObj[x])
  SpreadsheetApp
    .getActive()
    .getSheetByName(sheetName)
    .getRange(`${firstCol}${rowIndex}:${lastCol}${rowIndex}`)
    .setValues([rangeDataArr])
}

function addFormulasToRow(sheetName, rowIndex){
  setFormulaToCell(sheetName, rowIndex, 16, `=SUM(I${rowIndex} * N${rowIndex})`)
  setFormulaToCell(sheetName, rowIndex, 17, `=SUM(J${rowIndex} * O${rowIndex})`)
}

/**************** END: Main Operation Functions ****************/

/**************** Helper Functions ****************/

function getNextOpenRowIndex(sheetName) {
  const lastRow = SpreadsheetApp
    .getActiveSpreadsheet()
    .getSheetByName(sheetName)
    .getLastRow()
  return lastRow + 1
}

function addCheckbox(sheetName, rowIndex) {
  SpreadsheetApp
    .getActive()
    .getSheetByName(sheetName)
    .getRange(rowIndex, 1)
    .insertCheckboxes()
}

function calculatePLM(side, size, entry, exit) {
  if (side === "LONG") {
    return (size * (exit - entry)) * 100
  } else if (side === "SHORT") {
    return (size * (entry - exit)) * 100
  }
}

function calculatePGL(side, size, entry, exit) {
  if (side === "LONG") {
    return ((exit - entry) / entry)
  } else if (side === "SHORT") {
    return ((entry - exit) / exit)
  }
}

function setFormulaToCell(sheetName, rowIndex, column, formula) {
  SpreadsheetApp
    .getActiveSpreadsheet()
    .getSheetByName(sheetName)
    .getRange(rowIndex, column)
    .setFormula(formula)
}

function insertRow(sheetName, rowIndex) {
  return SpreadsheetApp.getActiveSpreadsheet()
    .getSheetByName(sheetName)
    .insertRowsAfter(rowIndex, 1)
}

/**************** END: Helper Functions ****************/

/**************** Validation and Error handling ****************/

function validateRange(sheetName, active_range) {
  const numRows = active_range.getNumRows()
  let valid = true

  if (numRows < 1) {
    valid = false
  } else if (numRows > 1) {
    valid = false
    sendErrorMessage(sheetName, headerRowNum + 1,
      "Select one row or cell at a time"
    )
  } else if (active_range.getRowIndex() === headerRowNum) {
    valid = false
    sendErrorMessage(sheetName, headerRowNum + 1,
      "Click any cell in the row to update..."
    )
  }
  return valid
}

function validateRangeData(sheetName, data) {
  const rowIndex = data.rowIndex
  const exitSize = data.ExitSize
  const entrySize = data.EntrySize
  const contType = data.ConType.toUpperCase()
  const side = data.Side.toUpperCase()
  const exitPrice = data.ExitPrice
  const entryPrice = data.EntryPrice
  let valid = true

  if (!data.RunUpdate) {
    valid = false
    sendErrorMessage(sheetName, rowIndex,
      "Not selected for update"
    )
  } else if (typeof exitSize !== 'number' || exitSize === 0 || exitSize > entrySize) {
    valid = false
    sendErrorMessage(sheetName, rowIndex,
      "ExitSize must be greater than 0, and equal to or less than EntrySize"
    )
  } else if (contType !== "CALL" && contType !== "PUT") {
    valid = false
    sendErrorMessage(sheetName, rowIndex,
      "ConType must be CALL or PUT"
    )
  } else if (side !== "LONG" && side !== "SHORT") {
    valid = false
    sendErrorMessage(sheetName, rowIndex,
      "Side must be LONG or SHORT"
    )
  } else if (typeof entryPrice !== 'number' || entryPrice === 0) {
    valid = false
    sendErrorMessage(sheetName, rowIndex,
      "EntryPrice is inva"
    )
  } else if (typeof exitPrice !== 'number' || exitPrice === 0) {
    valid = false
    sendErrorMessage(sheetName, rowIndex, 
      "ExitPrice is invalid..."
    )
  }
  return valid
}

function validateDataForRunnerRow(sheetName, data){
  const rowIndex = data.rowIndex
  const exitSize = data.ExitSize
  const entrySize = data.EntrySize
  let valid = true
  
  if(exitSize === entrySize){
    valid = false
    sendErrorMessage(sheetName, rowIndex, 
      "ExitSize must be less than EntrySize"
    )
  }
  return valid
}

function sendErrorMessage(sheetName, rowIndex, message) {
  SpreadsheetApp
    .getActive()
    .getSheetByName(sheetName)
    .getRange(rowIndex, errorColumn)
    .setValue(message);
}
